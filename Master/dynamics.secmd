//-----------------------------------------------------------------//
                          /*Math Commands*/
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
/*sign function, gives the sign of a number*/
function integer sgn(real some_number)
{
  local sign_of_some_number;
  sign_of_some_number := some_number/(abs(some_number));

return sign_of_some_number
}
//-----------------------------------------------------------------//
/* * Evolver does not have a built-in gaussian random generator, this is my own quick implimentation:
   * Returns member of set with a given mean and standard deviation
   * mean: mean
   * standard deviation: std_dev 
   Returns random number in normal distribution centering on 0.
   ~95% of numbers returned should fall between -2 and 2
   http://stackoverflow.com/questions/75677/converting-a-uniform-distribution-to-a-normal-distribution
*/
function real randn(real mean, real std_dev)
{
  local u1,v1,r1,c1;
  r1 := -1;
  while (r1 < 0 OR r1 > 1) do
  {
    u1 := 2*random-1;
    v1 := 2*random-1;
    r1 := u1*u1 + v1*v1
  };
  c1 := sqrt(-2*log(r1)/r1);
  return u1*c1*std_dev+mean
}

//-----------------------------------------------------------------//
//-----------------------------------------------------------------//
                          /* Initialization */
//-----------------------------------------------------------------//
//-----------------------------------------------------------------//

// Assign edges and facets to their energy methods
init_method_instance := 
{
  local mycom;
  foreach facets ff do
  { 
      mycom := sprintf "unset edges ar%g",ff.original;
      exec mycom;      
      mycom := sprintf "set facet[%g].edge method_instance ar%g",ff.id,ff.original;
      exec mycom;
      mycom := sprintf "unset edges perim%g",ff.original;
      exec mycom;
      mycom := sprintf "set facet[%g].edge method_instance perim%g",ff.id,ff.original;
      exec mycom;
  }
}; 


/* Random cell polarization angle from uniform [0,2pi] */
initialize_polarization_facet:=
{
    foreach facet ff where not void do
    {
      ff.pol_angle:= random*2*PI;
    } 
};

/* set all cell properties according to parameters file */
set_cell_properties:=
{
	local mycom;
	foreach facet ff where not void do
	{
		mycom := sprintf "farea%d.modulus := %f;", ff.id, kappa * length_scale ** 3 / force_scale; 
		exec mycom;
		mycom := sprintf "per%d.modulus := %f;", ff.id, gamma * length_scale / force_scale; 
		exec mycom;
		mycom := sprintf "ten%d.modulus := %f;", ff.id, -2 * gamma * pzero * length_scale / force_scale;
		exec mycom; 
	};
}



//-----------------------------------------------------------------//
/* Focal adhesions */
//-----------------------------------------------------------------//

// Create initial focal adhesions from cell vertices to the closest substrate node
init_focal_adhesion :=
{
	local minDist;
	local minId;
	local newe;

	foreach vertex vv where substrate != 1 do
	{
		minDist := max_binding_distance;
		foreach vertex ss where substrate == 1 and bindable do
		{
			if (vv.x - ss.x)^2 + (vv.y - ss.y)^2 < minDist then {minDist := (vv.x - ss.x)^2 + (vv.y - ss.y)^2; minId := ss.id}
		};

		//Only bind if there is a point within the maximum distance
		if minDist < max_binding_distance / length_scale then
		{
			//Create new edge
			newe := new_edge(vv.id, minId);
			set vv has_focal 1;
			set edge[newe] color focalCol;
			set edge[newe] focal 1;

			set edge[newe] method_instance focal_spring;
			set edge[newe] hooke_size edge[newe].length;
		};
	}
};

//Set up elastic energies for the substrate and focal adhesions
init_sub_energy :=
{
	set edge method_instance sub_spring where sub_edge == 1;
	set edge color ecmCol where sub_edge == 1;

	//Set ECM edges that don't have both vertices bindable to grey
	foreach edge ee where sub_edge == 1 do
	{
		if ee.vertex[1].bindable == 0 OR ee.vertex[2].bindable == 0 then ee.color := grey;
	};

	set edge method_instance focal_spring where focal == 1;

	//Set their scaling constants

	//Substrate energy - use stiffness = sqrt(3)/2 * E :  since it is a triangular network
	sub_spring.modulus := sqrt(3)/2 * substrate_youngs * substrate_height * length_scale / force_scale;

	//Focal adhesions
	focal_spring.modulus := focal_stiffness * length_scale / force_scale;
};
  
    
//Calculate only one cell center
procedure get_one_cell_center (integer fid)
{
	local cx, cy;

	cx := 0;
	cy := 0;

	//Weight by the length of the edges connected to the vertex
	foreach facet[fid].edge ee do
	{
		cx += ee.length * (ee.vertex[1].x + ee.vertex[2].x) * 0.5;
		cy += ee.length * (ee.vertex[1].y + ee.vertex[2].y) * 0.5;
	};

	facet[fid].center_x := cx/sum(facet[fid].edge, length);
	facet[fid].center_y := cy/sum(facet[fid].edge, length);

    return;
}


//Calculates the cell centers
get_cell_centers :=
{

	foreach facet ff do
	{
		get_one_cell_center(ff.id);
	}

}


// Check if cell vertex can protrude
function integer can_protrude(integer vid, integer fid)
{
	if facet[fid].crawling == 0 then return 0;

	// Protrusions can only happen on the outside
	if sum(vertex[vid].facet where void == 1, 1) == 0 then return 0;

	//We can protrude if we are in front of the cell center wrt the polarisation direction
	local cx, cy;

	cx := facet[fid].center_x;
	cy := facet[fid].center_y;

	return ((vertex[vid].x - cx)*cos(facet[fid].pol_angle) + (vertex[vid].y - cy)*sin(facet[fid].pol_angle) > 0);
}

// Create the protrusion - returns the id
function integer create_protrusion(integer vid, integer fid)
{
	//Make protrusions fan out from the polarisation angle
	local cx, cy;

	cx := facet[fid].center_x;
	cy := facet[fid].center_y;


	//Take average of polarisation angle and angle from cell center. Need to work a bit because of the mod 2pi

	diff := abs(facet[fid].pol_angle  % 2*pi - atan2(vertex[vid].y - cy, vertex[vid].x - cx)  % 2*pi);

	if diff < pi then
	{
		angle := (facet[fid].pol_angle % 2*pi + atan2(vertex[vid].y - cy, vertex[vid].x - cx) % 2*pi)/2 % 2*pi;
	}
	else
	{
		angle := (facet[fid].pol_angle % 2*pi + atan2(vertex[vid].y - cy, vertex[vid].x - cx) % 2*pi)/2 + pi % 2*pi;
	};

	vertex[vid].x += cos(angle) * protrusion_force / viscosity / length_scale * dt;
	vertex[vid].y += sin(angle) * protrusion_force / viscosity / length_scale * dt;

	newv := vid;
	
	return newv;
}

//Turn over focal adhesions and make new connections
update_adhesions :=
{
	foreach vertex vv where substrate == 0 and protrusion_vertex == 0 do
	{
		//Randomly connect and disconnect
		if vv.has_focal == 0 and random < kon * dt then
		{

			//We will connect a focal adhesion to the vertex unless we can make a protrusion
			bindingVid := vv.id;

			//If we are on the outside and can protrude then do so!
			if can_protrude(vv.id, min(vv.facet where void == 0, id)) then
			{
				//We attach the focal adhesion to the protrusion
				bindingVid := create_protrusion(vv.id, min(vv.facet where void == 0, id));

				set vv.has_focal 1;

			};

			//Some large value to start with
			minDist := max_binding_distance*max_binding_distance;
			foreach vertex ss where substrate == 1 and bindable do
			{
				dist := (vertex[bindingVid].x - ss.x)^2 + (vertex[bindingVid].y - ss.y)^2;
				if dist < minDist then {minDist := dist; minId := ss.id}
			};

			//Only bind if there is a point within the maximum distance
			if minDist < max_binding_distance ** 2 / length_scale ** 2 then
			{
				//Create new edge
				newe := new_edge(bindingVid, minId);
				set vv has_focal 1;
				set edge[newe] color focalCol;
				set edge[newe] focal 1;

				set edge[newe] method_instance focal_spring;
				set edge[newe] hooke_size edge[newe].length;


			};
		}

		else if vv.has_focal == 1 and random < koff * dt then
		{
			//Delete the protrusion. This attaches the focal adhesion to the cell
			foreach vv.edge ee where protrusion == 1 do {delete ee};
			foreach vv.edge ee where focal == 1 do {dissolve ee; set vv has_focal 0;};
		};
	};
};

//-----------------------------------------------------------------//
/* Recording */
//-----------------------------------------------------------------//

/* Record displacement on the substrate */
record_displacements :=
{

	recname := sprintf "output/displacement_%s_%06d.csv", output_name, simulation_step;

	foreach vertex vv where substrate == 1 do
	{
		printf "%f, %f\n", vv.x, vv.y >> recname;
	};

}


record_wound_area :=
{
	recname := sprintf "output/wound_area_%s.csv", output_name;
	printf "%f, %f\n", simulation_step, wound_area >> recname;
}



/* Record approximate cell centers - take mean position of vertices */
record_cell_centers :=
{
	recname := sprintf "output/cell_center_%s.csv", output_name;
	foreach facet ff where void == 0 do
	{
		printf "%f, %f,", ff.center_x, ff.center_y >> recname;
	};
	//New line
	printf "\n" >> recname;
}

record_wound_center :=
{
	recname := sprintf "output/wound_center_%s.csv", output_name;
	printf "%f, %f\n", facet[newf].center_x, facet[newf].center_y >> recname;
}

/* Record shape parameter, perimeter/sqrt(area) */
record_shape_parameter :=
{
	recname := sprintf "output/shape_parameter_%s.csv", output_name;
	foreach facet ff where void == 0 do
	{
		shape_param := 0;
		//Get perimeter and shape
		cmd := sprintf "shape_param := perim%d.value / sqrt(ar%d.value);", ff.id, ff.id;
		exec cmd;

		printf "%f,", shape_param >> recname;
	};
	//New line
	printf "\n" >> recname;
}

/* Record position of the wound vertices */
record_wound_vertices :=
{
	recname := sprintf "output/wound_position_%s_%06d.csv", output_name, simulation_step;

	foreach facet[newf].vertex vv do
	{
		printf "%f, %f\n", vv.x, vv.y >> recname;
	};
}

get_wound_distance :=
{
    // Get distance of cells away from the wound
    set facet wound_distance 100;
    
    set facet[newf] wound_distance 0;
    
    local current_dist;
    
    current_dist := 0;
    while max(facet, wound_distance) == 100 do
    {
        // Flood fill the distance
        foreach facet ff where wound_distance == current_dist do
        {
            // Set the distance for cells next to our current range
            foreach ff.edge ee do
            {
                foreach ee.facet ff2 do
                {
                    ff2.wound_distance := minimum(ff2.wound_distance, current_dist+1);
                };
            };
        };
        
        current_dist += 1;
    };
}

record_t1s :=
{
    recname := sprintf "output/t1s_%s.csv", output_name;
    
    get_wound_distance;
    
    // Count total t1s undergone by the cells
    set facet total_t1s 0;

    foreach edge ee where t1_timer == 2 do
    {
        facet[ee.cell1].total_t1s += 1;
        facet[ee.cell2].total_t1s += 1;
        facet[ee.cell3].total_t1s += 1;
        facet[ee.cell4].total_t1s += 1;
        
        ee.t1_timer := 0;
    };
     
    foreach edge ee where t1_timer == 1 do
    {
        ee.t1_timer := 2;
    };
    
    // Now record the number of t1s at each row
    local ii, num_t1s;
    
    for ( ii := 0 ; ii < 6; ii += 1 )
    {
        printf "%f,", sum(facet where wound_distance == ii, total_t1s) >> recname;
    };
    
    printf "\n" >> recname;
    
}

record_wound_distance :=
{
	recname := sprintf "output/wound_distance_%s.csv", output_name;
	foreach facet ff where void == 0 do
	{
		printf "%f,", ff.wound_distance >> recname;
	};

	printf "\n" >> recname;
}


//-----------------------------------------------------------------//
                          /* Dynamics */
//-----------------------------------------------------------------//

// Flags whether or not an edge should be t1 edge swapped
function integer should_t1(integer eid)
{
	//The edge must be below some minimum length
	if edge[eid].length > lt1 / length_scale then return 0;
    
    // Must have two facets
    if sum(edge[eid].facet, 1) < 2 then return 0;

    // Must be the only edge between two facets ie no subdivided edges
	if sum(edge[eid].vertex[1].edge where sub_edge == 0 and focal == 0, 1) < 3 then return 0;
	if sum(edge[eid].vertex[2].edge where sub_edge == 0 and focal == 0, 1) < 3 then return 0;


	//If the forcing on the two vertices is reducing the length then we should t1 swap

	//This is the dot product of the edge direction with the changing in the edge direction
	return ((edge[eid].vertex[1].x - edge[eid].vertex[2].x)*(edge[eid].vertex[1].vel_x - edge[eid].vertex[2].vel_x) + (edge[eid].vertex[1].y - edge[eid].vertex[2].y)*(edge[eid].vertex[1].vel_y - edge[eid].vertex[2].vel_y) < 0);
}

/* Attempt T1s */
try_t1 :=
{
  local t1_count, vid_1, vid_2, mycom, mymsg, wound_edge_count;

  foreach edge ee where sub_edge == 0 AND focal == 0 do
  {
    if should_t1(ee.id)
      then
      {

		// Record the cells involved in the t1 - only if the edge did not t1 and then t1 back
		if ee.t1_timer == 0 then
		{
            ee.cell1 := ee.facets[1].id;
            ee.cell2 := ee.facets[2].id;
        };

        t1_edgeswap ee;

        // The edge changes neighbours on t1_transition so record these
        if ee.t1_timer == 0 then
        {
            ee.cell3 := ee.facets[1].id;
            ee.cell4 := ee.facets[2].id;

			ee.t1_timer := 1;
        }
        else
        {
            // The edge must have t1d and then t1d back
            ee.t1_timer := 0;
        };

        vid_1 := ee.vertex[1].id;
        vid_2 := ee.vertex[2].id;
          
        // Reassign energy functions
        foreach vertex[vid_1].facets ff do
		{ 
			mycom := sprintf "unset edges ar%g",ff.original;
			exec mycom;
			mycom := sprintf "set facet[%g].edge method_instance ar%g",ff.id,ff.original;
			exec mycom;
			mycom := sprintf "unset edges perim%g",ff.original;
			exec mycom;
			mycom := sprintf "set facet[%g].edge method_instance perim%g",ff.id,ff.original;
			exec mycom;

			// Check if it still borders the wound
            wound_edge_count := 0;
            foreach ff.edge ee2 do {wound_edge_count += sum(ee2.facet where void, 1);};
            if wound_edge_count == 0 then {ff.wound_facet := 0;} else {ff.wound_facet := 1;};
              
		};
        foreach vertex[vid_2].facets ff do
		{ 
			mycom := sprintf "unset edges ar%g",ff.original;
			exec mycom;
			mycom := sprintf "set facet[%g].edge method_instance ar%g",ff.id,ff.original;
			exec mycom;
			mycom := sprintf "unset edges perim%g",ff.original;
			exec mycom;
			mycom := sprintf "set facet[%g].edge method_instance perim%g",ff.id,ff.original;
			exec mycom;
              
              // Check if it still borders the wound
              wound_edge_count := 0;
              foreach ff.edge ee2 do {wound_edge_count += sum(ee2.facet where void, 1);};
              if wound_edge_count == 0 then {ff.wound_facet := 0;} else {ff.wound_facet := 1;};
		};
        t1_count+=1;
      }
    else{};
  };


}


/* Get forces due to shape equilibrium model on each vertex */
get_shape_forces := 
{ 
	g;
	foreach vertex vv  do
	{
		vv.fx_shape := vv.v_force[1];
		vv.fy_shape := vv.v_force[2];

    } 
}; 


/* dynamically evolve the polarization on each facet */
evolve_polarization_facet:=
{    
    local rr, dir_x, dir_y, out_angle;
    foreach facet ff where not void do
    {
        // Fluctuate internal cells
        rr := DR  * time_scale * randn(0,1);
		ff.pol_angle += rr * sqrt(dt / time_scale);
        
        // Wound cells crawl towards gap
        
        // Polarisation angle can be off by +- pi/2
        ff.pol_angle := ff.pol_angle mod 2*pi;

        if ff.wound_facet then
        {
            // Fill wound - get cell vertices that are on the gap, move in average angle of the two
            local vid1, vid2, ang1, ang2, ang;
            
            vid1 := -1;
            
            foreach ff.vertex vv do
            {
                // If its a 3 way junction between two cells and the wound
                if sum(vv.facet where void, 1) == 1 and sum(vv.facet where not void, 1) > 1 then
                {
                    if vid1 == -1 then {vid1 := vv.id} else {vid2 := vv.id;};
                };
            };
            
            // Get angle between the vertices and cell center
            ang1 := atan2(vertex[vid1].y - ff.center_y, vertex[vid1].x - ff.center_x);
            ang2 := atan2(vertex[vid2].y - ff.center_y, vertex[vid2].x - ff.center_x);
            
            // Cell angle is the average of these two angles
            
            ff.pol_angle := atan2(sin(ang1)+sin(ang2),cos(ang1)+cos(ang2));
        };
    };
}


// Forces from internal cell crawling
get_active_forces :=
{    
    // Wound cells and cells on the outside don't have internal motility
    foreach facet ff do
    {
        local vf;
        
        if ff.wound_facet == 0 and min(ff.edge, valence) > 1 then {vf := V0;} else {vf := 0};
        
        ff.fx_active := vf / length_scale * time_scale * cos(ff.pol_angle);
        ff.fy_active := vf / length_scale * time_scale * sin(ff.pol_angle);
    };
}

// Move vertices
apply_forces :=
{
	//Get forces on each vertex
	foreach vertex vv where !fixed do
	{
		vv.vel_x:= vv.fx_shape + avg(vv.facets where void == 0, fx_active);
		vv.vel_y:= vv.fy_shape + avg(vv.facets where void == 0, fy_active);
	};

	//Move them
	foreach vertex vv where !fixed do
	{
		vv.x += dt * vv.vel_x  / (viscosity / force_scale  * length_scale);
		vv.y += dt * vv.vel_y  / (viscosity / force_scale  * length_scale);
	};
}



//Relax the system with no motility or adhesion - used to go from voronoi to a rest state
relax_one :=
{
	get_cell_centers;
	get_shape_forces;
	apply_forces;
	try_t1;

	simulation_step += 1;
}


// One simulation step with wounding
move_one :=
{
	get_cell_centers;

	//Wound area
	mycom := sprintf "wound_area := abs(ar%g.value)",newf;
	exec mycom;


	if recording AND simulation_step % img_output_interval == 0 then
	{
		imgname := sprintf "output/images/%s_%06d.ps", output_name, simulation_step;
		postscript imgname;
	};

	if recording AND simulation_step % record_interval == 0 then
	{
		record_displacements;
		record_wound_area;
	};

	update_adhesions;
    

    //Split long edges
    refine edge where length > lmax / length_scale AND sub_edge == 0 AND focal == 0;
    
	//Check for t1_edgeswaps - first we need to reduce any short edges made of multiple edges to just one edges
	delete edge ee where length < lmin / length_scale and ee.vertex[1].valence == 2 and sub_edge == 0 and focal == 0;
	delete edge ee where length < lmin / length_scale and ee.vertex[2].valence == 2 and sub_edge == 0 and focal == 0;

	try_t1;

	//Update which edges are wound
	set edge tension 0;
	set edge color cellCol where focal == 0 and sub_edge == 0;


	//Randomly change from crawling to purse string for cells next to wound
	foreach facet ff where crawling do
	{
		//Check if next to wound
		wound_edges := 0;
		foreach ff.edge ee do
		{
			wound_edges += sum(ee.facet where id == newf, 1);
		};

		if wound_edges > 0 and random < purse_string_rate * dt then set ff.crawling 0;

	};

	//Apply forces and colours
	foreach facet[newf].edge ee do
	{
		//Purse string
		if sum(ee.facet where crawling == 1 and void == 0, 1) == 0 then
		{
			set ee tension purse_string_tension / force_scale;
			set ee color purseCol;
		}
		//Crawling
		else
		{
			// Small tension to prevent overlapping
			set ee tension wound_tension;
			set ee color woundCol;
		}
	};

	get_shape_forces;
	get_active_forces;
	evolve_polarization_facet;

	apply_forces;

	simulation_step += 1;
}
